import { bold, SlashCommandBuilder } from '@discordjs/builders';
import { ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';

export class Help {
    data = new SlashCommandBuilder()
        .setName('help')
        .setDescription('Veja como me utilizar');

    async execute(interaction: ChatInputCommandInteraction): Promise<void> {

        const strComandos: string = `\u200B\n` +
            `${bold('/add')} Anota um hor√°rio com formul√°rio\n` +
            `${bold('/anotar')} Anota um hor√°rio sem formul√°rio\n` +
            `${bold('/list')} Exibe a tabela com todos hor√°rios\n` +
            `${bold('/reset geral')} Reseta todos hor√°rios de todas salas\n` +
            `${bold('/reset sala')} Reseta todos hor√°rios de uma sala espec√≠fica\n` +
            `${bold('/config horario')} Defina o intervalo inicial e final dos boss \n` +
            `${bold('/sala adicionar')} Adiciona uma nova sala\n` +
            `${bold('/sala remover')} Remove uma sala existente\n` +
            `${bold('/help')} Exibe essa ajuda\n\u200B`;

        const strIcones: string = '\u200B\n‚úÖ aberto\n‚ùå vencido\nüí§ ir√° abrir\n\u200B';

        const strBotoes: string = '\u200B\n' +
            `${bold('üî• Todos')}: Vis√£o dos hor√°rios por boss\n` +
            `${bold('üí¢ Salas')}: Vis√£o dos hor√°rios por cada sala\n` +
            `${bold('‚è≠ Pr√≥ximos')}: Exibe os boss pr√≥ximos de abrir/fechar\n` +
            `${bold('üèÜ Rank')}: Rank Top 10 Geral, Semanal e Di√°rio de quem est√° anotando hor√°rios\n` +
            `${bold('üíæ Hist√≥rico')}: Hist√≥rico da tabela nas √∫ltimas 24hrs com intervalo de 1hr\n\u200B`;

        const embedHelp = new EmbedBuilder()
            .setColor('Grey')
            .addFields([
                { name: '‚öô Comandos', value: strComandos},
                { name: 'Descri√ß√£o √çcones', value: strIcones},
                { name: 'Descri√ß√£o Bot√µes Tabela', value: strBotoes}
            ]);

        await interaction.reply({
            embeds: [embedHelp],
            ephemeral: true
        });
    }
}